/**
 * Passport setup for Google and Facebook. 
 */

const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const FacebookStrategy = require('passport-facebook').Strategy;
const User = require('../models/User.js');

//done method: go on to the next stage, params: Error, User
//take a piece of information to identify the user and put it into a cookie
passport.serializeUser((user, done) => {
  done(null, user.id);
});

//when cookie returns from browser, get the id from the cookie and find the user by id
passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    //attach user property to request object
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy({
  //options for strategy
  //after permission is granted, need a callback url to redirect
  callbackURL: '/auth/google/redirect',
  clientID: process.env.GOOGLE_CLIENT_ID, 
  clientSecret: process.env.GOOGLE_CLIENT_SECRET
}, (accessToken, refreshToken, profile, done) => {

    //passport callback function
    //accessToken: token from Google, use it to access information of user
    //refreshToken: refresh the access Token since the access could expire
    //profile: the profile information after exchanging the code with Google
    //done: call when we're done with this callback function

    //cookie - use the id generated by MongoDB

    User.findOne({googleId: profile.id}).then((currentUser) => {
      if (currentUser) {
        //we already have the user
        done(null, currentUser);
      } else {
        //we do not have user so we store a new user
        //googleId : the id that google gives that identifies the specified user
        new User({
          username: profile.displayName,
          googleId: profile.id
        }).save().then((newUser) =>{
          done(null, newUser);
        });
      }
    });
  })
);

passport.use(
  new FacebookStrategy({

    clientID: process.env.FACEBOOK_APP_ID,
    clientSecret: process.env.FACEBOOK_APP_SECRET,
    callbackURL: "http://localhost:5000/auth/facebook/redirect"
  }), (accessToken, refreshToken, profile, done) => {
    
    User.findOne({facebookId: profile.id}).then((currentUser) => {
      if (currentUser) {
        done(null, currentUser);
      } else {
        new User({
          username: profile.displayName,
          facebookId: profile.id
        }).save().then((newUser) =>{
          done(null, newUser);
        });
      }
    });
  }
);