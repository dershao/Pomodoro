const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20');
const keys = require('./keys');
const User = require('../models/user-model.js');

//take a piece of information to identify the user and put it into a cookie
passport.serializeUser((user, done) => {
  done(null, user.id);
});

//find the user by id and
passport.deserializeUser((id, done) => {
  User.findById(id).then((user) => {
    //attach user property to request object
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy({
  //options for strategy
  //after permission is granted, need a callback url to redirect
  callbackURL: '/auth/google/redirect',
  clientID: keys.google.clientID,
  clientSecret: keys.google.clientSecret
}, (accessToken, refreshToken, profile, done) => {
    //passport callback function
    //accessToken: token from Google, use it to access information of user
    //refreshToken: refresh the access Token since the access could expire
    //profile: the profile information after exchanging the code with Google
    //done: call when we're done with this callback function

    //cookie - use the id generated by MongoDB

    User.findOne({googleId: profile.id}).then((currentUser) => {
      if (currentUser) {
        //we already have the user
        console.log("user is: " + profile);
        done(null, currentUser);
      } else {
        //we do not have user so we store a new user

        //googleId : the id that google gives that identifies the specified user
        new User({
          username: profile.username,
          googleId: profile.id
        }).save().then((newUser) =>{
          console.log('new user created: ' + newUser);
          done(null, newUser);
        });
      }
    });
  }));
